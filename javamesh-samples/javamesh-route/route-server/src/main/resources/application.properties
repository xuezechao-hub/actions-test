# Redis settings
spring.redis.database=0
#redis单机,当添加了spring.redis.cluster.nodes后，单机自动失效，如果没有配置spring.redis.cluster.nodes，单机生效
spring.redis.host=localhost
#spring.redis.cluster.nodes=192.168.31.149:7001,192.168.31.149:7002,192.168.31.149:7003,192.168.31.149:7004,192.168.31.149:7005,192.168.31.149:7006
# 跨集群执行命令时要遵循的最大重定向数
spring.redis.cluster.max-redirects=5
spring.redis.port=6379
spring.redis.password=
spring.redis.timeout=10000
spring.redis.lettuce.pool.max-wait=100
spring.redis.lettuce.pool.max-idle=10
spring.redis.lettuce.pool.min-idle=1
spring.redis.lettuce.pool.max-active=10
# redis数据过期时间：单位天
redis.data.timeout=1
# redis规则数据过期时间：单位秒
redis.rule.data.timeout=600
# redis显示时间，单位：毫秒
redis.view.time=60000
# 访问端口
server.port=8090
server.servlet.encoding.force=true
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.enabled=true
# session过期时间
server.servlet.session.timeout=60s

# zk
zookeeper.client=127.0.0.1:2181
# 配置中心类型为servicecomb-kie时，填写为kie服务地址
kie.config.address=121.37.174.21:30110
# 自定义的忽略url
ignorePattern=/auth/login,/auth/loginUrl,/auth/getHiUrl
# 是否启用MO
conditional.cas.load=false
# cas服务端的地址
cas.server-url-prefix=https://www.manageone.com:31943/unisso
# cas服务端的登录地址
cas.server-login-url=https://www.manageone.com:31943/unisso/login.action
# 当前服务器的地址(客户端)
cas.client-host-url=http://192.168.31.61:8080/
# Ticket校验器使用AbstractTicketValidationFilter
cas.validation-type=cas
cas.use-session=true
# 自定义的退出url，退出成功后跳转到欢迎页
casClientLogoutUrl=https://www.manageone.com:31943/unisso/logout?service=http://192.168.31.61:8080/
# 全息排查url（若值为空，则页面上不显示全息排查模块）
holographic.investigation.url=

#会话超时时间 单位：秒
spring.session.timeout=60

kafka.bootstrap.servers=localhost:9092,localhost:9093,localhost:9094
#副本数
topic.replication=1
#分区数
topic.partition=3
#ack级别
producer.ack=0

# 标签生效默认端口
label.valid.port=8001

#kafka
#kafka服务器的地址，可以是以逗号“，”隔开的多个地址
spring.kafka.bootstrap-servers=localhost:9092

#生产者重试次数
spring.kafka.producer.retries=5
#请求超时时间
spring.kafka.producer.properties.request.timeout.ms=1000000
#参数用来指定分区中必须要有多少个副本收到这条消息，之后生产者才会认为这条消息是成功写入的。
#acks=1，默认值，表示只要leader副本成功写入消息，那么它就会收到来自服务端的成功响应
#acks=0，生产者发送消 息之后不需要等待任何服务端的响应
#acks=-1，或者all。生产者在消 息发送之后，需要等待 ISR 中的所有副本都成功写入消息之后才能够收到来自服务端的成功响应。
spring.kafka.producer.acks=all
#消息在网络上都是以字节 （Byte）的形式传输的，在发送之前需要创建一块内存区域来保存对应的消息 。BufferPool放入的bytebuffer的大小就是
#由该参数指定的。默认值为 16384B ，即 16KB
spring.kafka.producer.batch-size=16384
#RecordAccumulator缓存的大小可以通过生产者客户端参数buffer.memory配置，默认值为 33554432B ，即 32MB。
spring.kafka.producer.buffer-memory=33554432
#开启事务
#spring.kafka.producer.transaction-id-prefix=transaction-id-
#键的序列化类
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#值得序列化类
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#开启幂等性
spring.kafka.producer.properties.enable.idempotence=true
#组id
spring.kafka.consumer.group-id=label-consumer
#在Kafka中每当消费者查找不到所记录的消费位移 时， 就会根据消费者客户端参数
#aut.offset.reset的配置来决定从何处开始进行消费，这个参数的默认值为“latest”，表
#示从分区末尾开始消费消息。
spring.kafka.consumer.auto-offset-reset=latest
#是否自动提交
spring.kafka.consumer.enable-auto-commit=false
#定时提交的时间间隔
spring.kafka.consumer.auto-commit-interval=100
#消费者一次最大拉取的记录数
spring.kafka.consumer.max-poll-records=2000
#消费者一次拉取的最小字节数
spring.kafka.consumer.fetch-min-size=33554432
#两次拉取的最大间隔时间
spring.kafka.consumer.properties.max.poll.interval.ms=300000
#请求超时时间
spring.kafka.consumer.properties.request.timeout.ms=40000
#coordinator检测失败的时间
spring.kafka.consumer.properties.session.timeout.ms=30000
#开启正则匹配方式的订阅主题
spring.kafka.consumer.properties.exclude.internal.topics=false
#隔离级别
spring.kafka.consumer.properties.isolation.level=read_committed
#键的反序列化类
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#值的反序列化类
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# 路由Server配置
route.server.gray.config-center=zookeeper
route.server.gray.register-type=nacos
route.server.gray.tag-sync-intervalMS=5000
route.server.gray.zookeeper.configuration-path=/general-paas/configurations/grayGlobalRule
route.server.gray.nacos.url=http://localhost:8848
route.server.gray.nacos.groupName=DEFAULT_GROUP
route.server.gray.nacos.maxQuerySize=1000
#多个命名空间使用逗号隔开
route.server.gray.nacos.customNamespaceGroup=public,ppp
# 数据共享配置
route.server.share.redis.lockMaxTimeMs=3000
route.server.share.redis.tryLockIntervalMs=1000
route.server.share.redis.maxTryLockCount=5

conditional.cas.login.skip=false


